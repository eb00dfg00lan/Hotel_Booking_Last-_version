# pages/search_page.py
import streamlit as st
import json
from pathlib import Path
from tools.db import fetch_hotels
from core.filtres import make_city_filter, make_price_range_filter, make_stars_filter, filter_hotels

ROOMTYPE_FIXED = [
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç –ø–ª—é—Å",
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç –¥–µ–ª—é–∫—Å",
    "VIP —Å—Ç–∞–Ω–¥–∞—Ä—Ç",
    "VIP –ø–ª—é—Å",
    "VIP –¥–µ–ª—é–∫—Å",
]
EXTRAS = ["–ó–∞–≤—Ç—Ä–∞–∫","–û–±–µ–¥","–£–∂–∏–Ω","–ë–∞—Ä","–ù–∞–ø–∏—Ç–∫–∏","SPA","–ë–∞—Å—Å–µ–π–Ω","Wi-Fi","–ü–∞—Ä–∫–æ–≤–∫–∞"]

def _parse_list_field(raw) -> list[str]:
    if raw is None:
        return []
    if isinstance(raw, list):
        return [str(x).strip() for x in raw if str(x).strip()]
    if isinstance(raw, str):
        s = raw.strip()
        if not s:
            return []
        try:
            v = json.loads(s)
            if isinstance(v, list):
                return [str(x).strip() for x in v if str(x).strip()]
            if isinstance(v, dict):
                return [str(k).strip() for k in v.keys() if str(k).strip()]
        except Exception:
            pass
        return [t.strip() for t in s.split(",") if t.strip()]
    return [str(raw).strip()] if str(raw).strip() else []

def _norm(s: str) -> str:
    return "".join(ch for ch in s.lower() if ch.isalnum())

def _make_name_presence_filter(list_key: str, selected: list[str], require_all: bool):
    pats = [_norm(x) for x in (selected or []) if x and x.strip()]
    def pred(h: dict) -> bool:
        if not pats:
            return True
        vals = [_norm(x) for x in h.get(list_key, [])]
        if require_all:
            return all(any(p == v or p in v for v in vals) for p in pats)
        return any(any(p == v or p in v for v in vals) for p in pats)
    return pred

def load_css(path: str):
    css = Path(path).read_text(encoding="utf-8")
    st.markdown(f"<style>{css}</style>", unsafe_allow_html=True)

def render(goto):
    st.title("üîç –ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π")
    load_css("assets/app.css")

    # rows: id, name, city, price, rating, rooms, available, roomtype, rateplan, owner_id
    rows = fetch_hotels() or []

    # –±–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    st.markdown('<div class="filters-header">‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã</div>', unsafe_allow_html=True)
    cities = sorted({r[2] for r in rows}) if rows else []
    city = st.selectbox("üèôÔ∏è –ì–æ—Ä–æ–¥", ["–í—Å–µ"] + cities)

    max_price_in_data = max((int(r[3]) for r in rows), default=100000)
    slider_max = max(10000, ((max_price_in_data // 10000) + 1) * 10000)

    colA, colB = st.columns(2)
    with colA:
        st.markdown("üí∞ **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞** (‚Ç∏/–Ω–æ—á—å)")
        max_price = st.slider("", 0, slider_max, min(slider_max, 50000), key="price_slider")
    with colB:
        st.markdown("‚≠ê **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥**")
        min_stars = st.slider("", 1, 5, 3, key="stars_slider")

    # –¢–∏–ø—ã –Ω–æ–º–µ—Ä–æ–≤ (roomtype)
    with st.expander("–¢–∏–ø—ã –Ω–æ–º–µ—Ä–æ–≤", expanded=True):
        col1, col2, col3 = st.columns(3)
        with col1:
            rt_std       = st.checkbox("–°—Ç–∞–Ω–¥–∞—Ä—Ç", key="rt_std")
            rt_std_plus  = st.checkbox("–°—Ç–∞–Ω–¥–∞—Ä—Ç –ø–ª—é—Å", key="rt_std_plus")
        with col2:
            rt_std_delux = st.checkbox("–°—Ç–∞–Ω–¥–∞—Ä—Ç –¥–µ–ª—é–∫—Å", key="rt_std_delux")
            rt_vip_std   = st.checkbox("VIP —Å—Ç–∞–Ω–¥–∞—Ä—Ç", key="rt_vip_std")
        with col3:
            rt_vip_plus  = st.checkbox("VIP –ø–ª—é—Å", key="rt_vip_plus")
            rt_vip_delux = st.checkbox("VIP –¥–µ–ª—é–∫—Å", key="rt_vip_delux")
        rt_mode = st.radio("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤", ["–õ—é–±–æ–π", "–í—Å–µ"], horizontal=True, key="rt_mode")
        selected_roomtypes = [
            name for flag, name in [
                (rt_std, "–°—Ç–∞–Ω–¥–∞—Ä—Ç"),
                (rt_std_plus, "–°—Ç–∞–Ω–¥–∞—Ä—Ç –ø–ª—é—Å"),
                (rt_std_delux, "–°—Ç–∞–Ω–¥–∞—Ä—Ç –¥–µ–ª—é–∫—Å"),
                (rt_vip_std, "VIP —Å—Ç–∞–Ω–¥–∞—Ä—Ç"),
                (rt_vip_plus, "VIP –ø–ª—é—Å"),
                (rt_vip_delux, "VIP –¥–µ–ª—é–∫—Å"),
            ] if flag
        ]

    # –î–æ–ø-—É—Å–ª—É–≥–∏ (rateplan)
    with st.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", expanded=True):
        c1, c2, c3 = st.columns(3)
        flags = {}
        for idx, name in enumerate(EXTRAS):
            with (c1 if idx % 3 == 0 else c2 if idx % 3 == 1 else c3):
                flags[name] = st.checkbox(name, key=f"rp_{_norm(name)}")
        rp_mode = st.radio("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —É—Å–ª—É–≥", ["–õ—é–±–∞—è", "–í—Å–µ"], horizontal=True, key="rp_mode")
        selected_extras = [name for name, f in flags.items() if f]

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    items = []
    for r in rows:
        roomtype_list = _parse_list_field(r[7])
        rateplan_list = _parse_list_field(r[8])
        items.append({
            "id": int(r[0]),
            "name": r[1],
            "city": r[2],
            "price": int(r[3]),
            "rating": float(r[4]),
            "rooms": int(r[5]),
            "available": bool(r[6]),
            "roomtype_list": roomtype_list,
            "rateplan_list": rateplan_list,  # —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —É—Å–ª—É–≥–∏
        })

    preds = [
        make_city_filter(city),
        make_price_range_filter(0, max_price),
        make_stars_filter(min_stars),
        _make_name_presence_filter("roomtype_list", selected_roomtypes, require_all=(rt_mode == "–í—Å–µ")),
        _make_name_presence_filter("rateplan_list", selected_extras, require_all=(rp_mode == "–í—Å–µ")),
    ]

    filtered = filter_hotels(items, preds)

    if not filtered:
        st.info("–ù–µ—Ç –æ—Ç–µ–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω—è—Ç—å —á–∞—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—Ç–∏–ø—ã/—É—Å–ª—É–≥–∏).")
        return

    for h in filtered:
        stars = max(1, min(5, int(round(h["rating"]))))
        with st.expander(f"{h['name']} ‚Äî {h['city']} ‚≠ê {stars}", expanded=False):
            st.write(f"**–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å:** {h['price']} ‚Ç∏")
            st.write(f"**–†–µ–π—Ç–∏–Ω–≥:** {h['rating']:.1f}")
            st.write(f"**–ù–æ–º–µ—Ä–æ–≤ –≤—Å–µ–≥–æ:** {h['rooms']}")
            st.write(f"**–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å:** {'‚úÖ –ï—Å—Ç—å' if h['available'] else '‚ùå –ù–µ—Ç'}")
            if h.get("roomtype_list"):
                st.write("**–¢–∏–ø—ã –Ω–æ–º–µ—Ä–æ–≤:** " + ", ".join(sorted(set(h["roomtype_list"]))))
            if h.get("rateplan_list"):
                st.write("**–î–æ–ø. —É—Å–ª—É–≥–∏:** " + ", ".join(sorted(set(h["rateplan_list"]))))

            if st.button("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", key=f"book_{h['id']}"):
                if not st.session_state.get("user"):
                    st.error("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
                else:
                    st.session_state.selected_hotel_id = h["id"]
                    goto("Booking")
