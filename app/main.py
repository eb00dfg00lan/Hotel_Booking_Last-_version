import streamlit as st
import re
import hashlib
from datetime import datetime, date
from tools.db import init_db, seed_database, fetch_hotels, insert_booking, fetch_user_by_email, get_connection
from core.domain import Hotel, User, Booking
from core.transforms import total_cost_all
from core.recursion import sum_guests, count_bookings
from core.filtres import make_city_filter, make_price_range_filter, filter_hotels


init_db()
seed_database()

st.set_page_config(page_title="Hotel Booking System", page_icon="üè®", layout="wide")

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
if "page" not in st.session_state:
    st.session_state.page = "welcome"
if "user" not in st.session_state:
    st.session_state.user = None

# --- –°—Ç–∏–ª–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –º–µ–Ω—é ---
st.markdown("""
    <style>
    .top-navbar {
        position: fixed;
        top: 0; left: 0; right: 0;
        background-color: white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        padding: 10px 25px;
        z-index: 999;
    }
    .top-navbar button {
        border: none;
        background-color: #f0f2f6;
        border-radius: 8px;
        padding: 6px 15px;
        margin-left: 10px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
    }
    .top-navbar button:hover {
        background-color: #e0e0e0;
    }
    </style>
""", unsafe_allow_html=True)

# --- –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å ---
st.markdown('<div class="top-navbar">', unsafe_allow_html=True)
col1, col2, col3, col4, col5, col6, col7 = st.columns([6, 1.2, 1.2, 1.6, 1.6, 1.8, 1.2])

def set_page(p):
    st.session_state.page = p

with col2:
    if st.button("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"):
        set_page("register")
with col3:
    if st.button("–í—Ö–æ–¥"):
        set_page("login")
with col4:
    if st.button("–ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π"):
        set_page("search")
with col5:
    if st.button("–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"):
        set_page("bookings")
with col6:
    if st.button("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"):
        set_page("admin")
with col7:
    if st.button("–í—ã–π—Ç–∏"):
        st.session_state.user = None
        st.session_state.page = "welcome"
        st.success("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")

st.markdown('</div>', unsafe_allow_html=True)
st.markdown("<br><br><br>", unsafe_allow_html=True)

# --- –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü ---
page = st.session_state.page

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def is_valid_email(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)
# --- –ì–ª–∞–≤–Ω–∞—è ---
if page == "welcome":
    st.title("üè® Hotel Booking System")
    st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é —Å–≤–µ—Ä—Ö—É.")



# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
elif page == "register":
    st.title("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="reg_name")
    email = st.text_input("Email", key="reg_email")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="reg_pass")
    if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
        if not (username and email and password):
            st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
        elif not is_valid_email(email):
            st.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
        else:
            with get_connection() as conn:
                cur = conn.cursor()
                try:
                    cur.execute("INSERT INTO users (username, email, password) VALUES (?, ?, ?)",
                                (username, email, hash_password(password)))
                    conn.commit()
                    st.success("–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω. –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –≤–æ–∑–º–æ–∂–Ω–æ, email —É–∂–µ –∑–∞–Ω—è—Ç. {e}")

# --- –í—Ö–æ–¥ ---
elif page == "login":
    st.title("üîë –í—Ö–æ–¥")
    email = st.text_input("Email", key="login_email")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_pass")
    if st.button("–í–æ–π—Ç–∏"):
        with get_connection() as conn:
            cur = conn.cursor()
            cur.execute("SELECT id, username, email, password FROM users WHERE email=?", (email,))
            user = cur.fetchone()
            if user and hash_password(password) == user[3]:
                st.session_state.user = {"id": user[0], "username": user[1], "email": user[2]}
                st.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user[1]}!")
                set_page("search")
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

# --- –ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π ---
elif page == "search":
    st.title("üîç –ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π")
    rows = fetch_hotels()
    cities = sorted({r[2] for r in rows}) if rows else []
    city = st.selectbox("–ì–æ—Ä–æ–¥", ["–í—Å–µ"] + cities)
    max_price = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", 0, 100000, 50000)

    preds = []
    if city != "–í—Å–µ":
        preds.append(make_city_filter(city))
    preds.append(make_price_range_filter(0, max_price))
    combined = lambda h: all(p(h) for p in preds)

    hotels_rows = fetch_hotels(city if city != "–í—Å–µ" else None, max_price)
    hotels = [Hotel(id=r[0], name=r[1], city=r[2], price=r[3], rating=r[4], rooms=r[5], available=bool(r[6])) for r in hotels_rows]
    filtered = list(filter(combined, hotels))

    # Track selected hotel for booking
    if "selected_hotel_id" not in st.session_state:
        st.session_state.selected_hotel_id = None

    if filtered:
        for h in filtered:
            st.markdown(f"### {h.name} ‚Äî {h.city}")
            st.write(f"–¶–µ–Ω–∞: {h.price} ‚Ç∏ | –†–µ–π—Ç–∏–Ω–≥: {h.rating} | –ù–æ–º–µ—Ä–æ–≤: {h.rooms}")
            if st.button(f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å {h.name}", key=f"book_{h.id}"):
                if not st.session_state.user:
                    st.error("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
                else:
                    st.session_state.selected_hotel_id = h.id

            # Show booking form only for selected hotel
            if st.session_state.selected_hotel_id == h.id and st.session_state.user:
                check_in = st.date_input("–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞", min_value=date.today(), key=f"ci_{h.id}")
                check_out = st.date_input("–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞", min_value=check_in, key=f"co_{h.id}")
                guests = st.number_input("–ì–æ—Å—Ç–µ–π", 1, 10, key=f"gu_{h.id}")
                if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", key=f"confirm_{h.id}"):
                    insert_booking(st.session_state.user["id"], h.id, check_in.isoformat(), check_out.isoformat(), guests)
                    st.success("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.")
                    st.session_state.selected_hotel_id = None  # Reset after booking
    else:
        st.info("–ù–µ—Ç –æ—Ç–µ–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
# --- –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ---
elif page == "bookings":
    st.title("üìö –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    if not st.session_state.user:
        st.error("–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –±—Ä–æ–Ω–∏.")
    else:
        with get_connection() as conn:
            cur = conn.cursor()
            cur.execute("""
                SELECT b.id, h.name, b.check_in, b.check_out, b.guests
                FROM bookings b JOIN hotels h ON b.hotel_id = h.id
                WHERE b.user_id = ?
            """, (st.session_state.user["id"],))
            rows = cur.fetchall()
        if rows:
            for r in rows:
                st.write(f"üÜî{r[0]} | üè® {r[1]} | {r[2]} ‚Üí {r[3]} | üë• {r[4]}")
        else:
            st.info("–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")

# --- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ---
elif page == "admin":
    st.title("üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
    if not st.session_state.user or st.session_state.user["email"] != "admin@hotel.com":
        st.error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    else:
        tab1, tab2, tab3 = st.tabs(["–û—Ç–µ–ª–∏", "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", "–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–µ–ª—å"])

        # –û—Ç–µ–ª–∏
        with tab1:
            st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–µ–ª—è–º–∏")
            with get_connection() as conn:
                cur = conn.cursor()
                cur.execute("SELECT id, name, city, price, rating, rooms FROM hotels")
                rows = cur.fetchall()
            for r in rows:
                col1, col2 = st.columns([4, 1])
                with col1:
                    st.write(f"üè® {r[1]} | {r[2]} | {r[3]} ‚Ç∏ | ‚≠ê {r[4]}")
                with col2:
                    if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_h_{r[0]}"):
                        with get_connection() as conn:
                            cur = conn.cursor()
                            cur.execute("DELETE FROM hotels WHERE id=?", (r[0],))
                            conn.commit()
                        st.success("–û—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.")
                        st.experimental_rerun()

        # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        with tab2:
            st.subheader("–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            with get_connection() as conn:
                cur = conn.cursor()
                cur.execute("""
                    SELECT b.id, u.username, h.name, b.check_in, b.check_out, b.guests
                    FROM bookings b
                    JOIN users u ON b.user_id = u.id
                    JOIN hotels h ON b.hotel_id = h.id
                """)
                rows = cur.fetchall()
            for r in rows:
                col1, col2 = st.columns([4, 1])
                with col1:
                    st.write(f"üÜî{r[0]} | üë§{r[1]} | üè®{r[2]} | {r[3]} ‚Üí {r[4]} | üë• {r[5]}")
                with col2:
                    if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_b_{r[0]}"):
                        with get_connection() as conn:
                            cur = conn.cursor()
                            cur.execute("DELETE FROM bookings WHERE id=?", (r[0],))
                            conn.commit()
                        st.success("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
                        st.experimental_rerun()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–µ–ª—è
        with tab3:
            st.subheader("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–µ–ª—å")
            name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ")
            city = st.text_input("–ì–æ—Ä–æ–¥")
            price = st.number_input("–¶–µ–Ω–∞", min_value=0)
            rating = st.slider("–†–µ–π—Ç–∏–Ω–≥", 0.0, 5.0, 4.0, 0.1)
            rooms = st.number_input("–ù–æ–º–µ—Ä–æ–≤", min_value=1)
            if st.button("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–µ–ª—å"):
                with get_connection() as conn:
                    cur = conn.cursor()
                    cur.execute("""
                        INSERT INTO hotels (name, city, price, rating, rooms, available)
                        VALUES (?, ?, ?, ?, ?, 1)
                    """, (name, city, price, rating, rooms))
                    conn.commit()
                st.success("–û—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.")
                st.experimental_rerun()
